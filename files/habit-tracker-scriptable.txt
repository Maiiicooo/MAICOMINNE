
// ======================
// USER CONFIGURATION
// ======================

const EVENT_NAME = "WORKOUT";
const CURRENT_YEAR = new Date().getFullYear();
const HABIT_START_DATE = new Date(CURRENT_YEAR, 3, 2); // April 2nd

const FAILED_DAYS = [5, 7, 10]; 
const BG_IMAGE_URL = "";

const COLOR_COMPLETED = new Color("#00AA00");
const COLOR_FAILED = new Color("#FF0000");
const COLOR_UPCOMING = new Color("#808080");
const TEXT_COLOR = new Color("#FFFFFF");

const CIRCLE_SIZE = 4;
const CIRCLE_SPACING = 4;
const PADDING = 8;
const TEXT_SPACING = 8;
const DOT_SHIFT_LEFT = 2;
const YEAR_OFFSET = DOT_SHIFT_LEFT - 2;
const STREAK_OFFSET = 0;
const BG_COLOR = "#406260";
const BG_OVERLAY_OPACITY = 0.5;
const WIDGET_WIDTH = 320;
const MS_PER_DAY = 86400000;

// ======================
// DO NOT EDIT BELOW UNLESS YOU KNOW WHAT YOU'RE DOING
// ======================

const NOW = new Date();
const FULL_YEAR_START = new Date(CURRENT_YEAR, 0, 1);
const FULL_YEAR_END = new Date(CURRENT_YEAR, 11, 31);
const FULL_YEAR_DAYS_TOTAL = Math.round((FULL_YEAR_END - FULL_YEAR_START) / MS_PER_DAY) + 1;
const habitDaysPassed = NOW >= HABIT_START_DATE ? Math.floor((NOW - HABIT_START_DATE) / MS_PER_DAY) + 1 : 0;

let streak = 0;
for (let d = habitDaysPassed; d >= 1; d--) {
  if (FAILED_DAYS.includes(d)) break;
  streak++;
}

const widget = new ListWidget();

if (BG_IMAGE_URL) {
  try {
    const req = new Request(BG_IMAGE_URL);
    widget.backgroundImage = await req.loadImage();
  } catch (e) {
    console.log("Background image failed to load.");
  }
} else {
  const overlay = new LinearGradient();
  overlay.locations = [0, 1];
  overlay.colors = [new Color(BG_COLOR, BG_OVERLAY_OPACITY), new Color(BG_COLOR, BG_OVERLAY_OPACITY)];
  widget.backgroundGradient = overlay;
}

const AVAILABLE_WIDTH = WIDGET_WIDTH - (2 * PADDING);
const TOTAL_CIRCLE_WIDTH = CIRCLE_SIZE + CIRCLE_SPACING;
const COLUMNS = Math.floor(AVAILABLE_WIDTH / TOTAL_CIRCLE_WIDTH);
const ROWS = Math.ceil(FULL_YEAR_DAYS_TOTAL / COLUMNS);

const MENLO_REGULAR = new Font("Menlo", 12);
const MENLO_BOLD = new Font("Menlo-Bold", 12);
widget.setPadding(12, PADDING, 12, PADDING);

const gridContainer = widget.addStack();
gridContainer.layoutVertically();

const gridStack = gridContainer.addStack();
gridStack.layoutVertically();
gridStack.spacing = CIRCLE_SPACING;

for (let row = 0; row < ROWS; row++) {
  const rowStack = gridStack.addStack();
  rowStack.layoutHorizontally();
  rowStack.addSpacer(DOT_SHIFT_LEFT);
  
  for (let col = 0; col < COLUMNS; col++) {
    const dayIndex = row * COLUMNS + col + 1;
    if (dayIndex > FULL_YEAR_DAYS_TOTAL) break;
    
    let currentDate = new Date(CURRENT_YEAR, 0, dayIndex);
    let dotColor;
    
    if (currentDate < HABIT_START_DATE) {
      dotColor = COLOR_UPCOMING;
    } else if (currentDate <= NOW) {
      const habitDayNumber = Math.floor((currentDate - HABIT_START_DATE) / MS_PER_DAY) + 1;
      dotColor = FAILED_DAYS.includes(habitDayNumber) ? COLOR_FAILED : COLOR_COMPLETED;
    } else {
      dotColor = COLOR_UPCOMING;
    }
    
    const circle = rowStack.addText("●");
    circle.font = Font.systemFont(CIRCLE_SIZE);
    circle.textColor = dotColor;
    
    if (col < COLUMNS - 1) rowStack.addSpacer(CIRCLE_SPACING);
  }
}

widget.addSpacer(TEXT_SPACING);

const footer = widget.addStack();
footer.layoutHorizontally();

const eventStack = footer.addStack();
eventStack.addSpacer(YEAR_OFFSET);
const eventText = eventStack.addText(EVENT_NAME);
eventText.font = MENLO_BOLD;
eventText.textColor = TEXT_COLOR;

const streakText = `${streak} day streak`;
const textWidth = streakText.length * 7.5;
const availableSpace = WIDGET_WIDTH - (PADDING * 2) - YEAR_OFFSET - (eventText.text.length * 7.5);
footer.addSpacer(availableSpace - textWidth + STREAK_OFFSET);

const streakStack = footer.addStack();
const streakDisplay = streakStack.addText(streakText);
streakDisplay.font = MENLO_REGULAR;
streakDisplay.textColor = TEXT_COLOR;

if (config.runsInWidget) {
  Script.setWidget(widget);
} else {
  widget.presentMedium();
}
Script.complete();
